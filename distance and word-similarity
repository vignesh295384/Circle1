import nltk
nltk.download('wordnet')
from nltk.corpus import wordnet

def calculate_nwd(word1, word2):
    synsets1 = wordnet.synsets(word1)
    synsets2 = wordnet.synsets(word2)

    if not synsets1 or not synsets2:
        return None

    min_distance = float('inf')
    for synset1 in synsets1:
        for synset2 in synsets2:
            distance = synset1.shortest_path_distance(synset2)
            if distance is not None and distance < min_distance:
                min_distance = distance

    if min_distance == float('inf'):
        return None

    return min_distance / max(len(synsets1), len(synsets2))

def calculate_word_similarity(word1, word2):
    synsets1 = wordnet.synsets(word1)
    synsets2 = wordnet.synsets(word2)

    if not synsets1 or not synsets2:
        return None

    max_similarity = 0.0
    for synset1 in synsets1:
        for synset2 in synsets2:
            similarity = synset1.path_similarity(synset2)
            if similarity is not None and similarity > max_similarity:
                max_similarity = similarity

    return max_similarity

# Example usage
word1 = "dog"
word2 = "cat"

nwd = calculate_nwd(word1, word2)
similarity = calculate_word_similarity(word1, word2)

print(f"Normalized Web Distance: {nwd}")
print(f"Word Similarity: {similarity}")

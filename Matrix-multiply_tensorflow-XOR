import tensorflow as tf 
print("Matrix Multiplication Demo") 
x=tf.constant([1,2,3,4,5,6],shape=[2,3]) 
print(x) 
y=tf.constant([7,8,9,10,11,12],shape=[3,2]) 
print(y) 
z=tf.matmul(x,y) 
print("Product:",z) 
e_matrix_A=tf.random.uniform([2,2],minval=3,maxval=10,dtype=tf.float32,
name="matrixA") 
print("Matrix A:\n{}\n\n".format(e_matrix_A)) 
eigen_values_A,eigen_vectors_A=tf.linalg.eigh(e_matrix_A) 
print("Eigen Vectors:\n{}\n\nEigen ")

import numpy as np 
from keras.layers import Dense 
from keras.models import Sequential 
model=Sequential() 
model.add(Dense(units=2,activation='relu',input_dim=2)) 
model.add(Dense(units=1,activation='sigmoid')) 
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy']) 
print(model.summary()) 
print(model.get_weights()) 
X=np.array([[0.,0.],[0.,1.],[1.,0.],[1.,1.]]) 
Y=np.array([0.,1.,1.,0.]) 
model.fit(X,Y,epochs=1000,batch_size=4) 
print(model.get_weights()) 
print(model.predict(X,batch_size=4))
